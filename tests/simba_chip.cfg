# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

arch =
{
    arithmetic =
    {
        instances = 1024;
        word-bits = 8;
        meshX = 16;
    };
    storage =
    (
        {
            name = "Registers";
            entries = 1;
            instances = 1024;
            meshX = 16; 
            word-bits = 8; 
            cluster-size = 8;
        },
        {
            name = "AccumulationBuffer";
            entries = 128;
            instances = 128;
            meshX = 16;
            word-bits = 24;
            cluster-size = 8;
        },
        {
            name = "WeightBuffer";
            entries = 4096;
            instances = 128;
            meshX = 16;
            word-bits = 8;
            block-size = 8;
        },
        {
            name = "InputBuffer";
            entries = 8192;
            instances = 16;
            meshX = 16;
            word-bits = 8;
            block-size = 8;
        },
        {
            name = "GlobalBuffer";
            sizeKB = 64;
            instances = 1;
            word-bits = 8;
            block-size = 32;
        },
        {
            name = "DRAM";
            technology = "DRAM";
            instances = 1;
            word-bits = 8;
            block-size = 64;
            bandwidth = 20.0;
        }
    );
};
mapper =
{
    algorithm = "linear-pruned";
    search_size = 4;
    victory-condition = 0;
    heartbeat = 1000;
    num-threads = 4;
};
mapspace =
{
    template = "uber";
    constraints = "ckspatial";
    constraints_ckspatial =
    (
        {
            target = "Registers";
            type = "datatype";
            keep =
            [
                "Weights"
            ];
            bypass =
            [
                "Inputs",
                "Outputs"
            ];
        },
        {
            target = "AccumulationBuffer";
            type = "datatype";
            keep =
            [
                "Outputs"
            ];
            bypass =
            [
                "Weights",
                "Inputs"
            ];
        },
        {
            target = "WeightBuffer";
            type = "datatype";
            keep =
            [
                "Weights"
            ];
            bypass =
            [
                "Inputs",
                "Outputs"
            ];
        },
        {
            target = "InputBuffer";
            type = "datatype";
            keep =
            [
                "Inputs"
            ];
            bypass =
            [
                "Weights",
                "Outputs"
            ];
        },
        {
            target = "GlobalBuffer";
            type = "datatype";
            keep =
            [
                "Inputs",
                "Outputs"
            ];
            bypass =
            [
                "Weights"
            ];
        },
        {
            target = "AccumulationBuffer";
            type = "spatial";
            factors = "P1 Q1 R1 S1 C8 K1 N1";
            permutation = "CKQRSPN";
            split = 0;
        },
        {
            target = "InputBuffer";
            type = "spatial";
            factors = "P1 Q1 R1 S1 C1 K8 N1";
            permutation = "KCQRSPN";
            split = 0;
        },
        {
            target = "GlobalBuffer";
            type = "spatial";
            factors = "R1 S1 P1 Q1 N1";
            permutation = "KCRSPQN";
            split = 7;
        },
        {
            target = "Registers";
            type = "temporal";
            factors = "R1 S1 C1 K1 N1"; # P Q free
            permutation = "RSCKN";
        },
        {
            target = "InputBuffer";
            type = "temporal";
            factors = "P1 Q1 R1 S1 C1 K1 N1"; # no free
            permutation = "PQRSCKN";
        },
        {
            target = "AccumulationBuffer";
            type = "temporal";
            factors = "P1 Q1 R1 S1 C1 N1"; # K free
            permutation = "PQRSCN";
        },
        {
            target = "WeightBuffer";
            type = "temporal";
            factors = "R0 S0 P1 Q1 K1 N1"; # RS full, C free
            permutation = "PQKNRS";
        },
        {
            target = "GlobalBuffer";
            type = "temporal";
            factors = "R1 S1 C2 K2 N1"; # P Q free
            permutation = "RSNCK"; # Along with C2 above, C destroys any temporal
                                   # sliding window from global->input buffer.
                                   # Required to force equivalance with equations
                                   # used for testing. For general runs, remove
                                   # the permutation and change C2 to C1.
                                   # K2 prevents accumulator buffer from holding
                                   # a set of psums resident over DRAM iterations.
        },
        {
            target = "DRAM";
            type = "temporal";
            factors = "R1 S1 N1"; # P Q C K free
            permutation = "RSN";
        }
    );
};
problem =
{
    R = 3;
    S = 3;
    P = 48;
    Q = 480;
    C = 1;
    K = 16;
    N = 1;
};
sim =
{
    dumpTextStats = True;
};
