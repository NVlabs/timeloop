# Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os

# AddOption('--disable_emu_mt', dest='disable_emu_mt', default=False, action='store_true', help='Disable multi-threaded emulation')
# AddOption('--disable_emu_debug', dest='enable_emu_debug', default=True, action='store_false', help='Disable debug messages in emulation code')

env = Environment(ENV = os.environ)

libs = 'BARVINOK NTL'

for lib in libs.split():
  libdir = os.environ.get(lib + 'PATH')
  if libdir:
    env.Append(CPPPATH = [os.path.join(libdir, 'include')])
    env.Append(LIBPATH = [os.path.join(libdir, 'lib')])

env.Append(CPPPATH = ["./"])
env.Append(CCFLAGS = ['-Wall', '-Wextra', '-Wunused-parameter' , '-fmax-errors=1', '-std=c++17', '-g'])

# Note: stdc++fs no longer required with gcc 9+.
env.Append(LIBS = ['isl', 'barvinok', 'ntl', 'pthread', 'polylibgmp', 'stdc++fs'])

# if GetOption('disable_emu_mt'):
#     env.Append(CPPDEFINES = 'DISABLE_MT')

# if GetOption('enable_emu_debug'):
#     env.Append(CPPDEFINES = 'EMU_DEBUG')

cpp_src = [file for file in os.listdir(os.getcwd()) if file.endswith(".cpp")]
cpp_src.extend(["tutorial/" + file for file in os.listdir(os.getcwd() + "/tutorial") if file.endswith(".cpp")])

print(cpp_src)

env.Program(target = 'tenssella', source = cpp_src)
