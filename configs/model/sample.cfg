# Copyright (c) 2019, NVIDIA CORPORATION. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

arch : 
{
  arithmetic : 
  {
    instances = 256;
    word-bits = 16;
    meshX = 16;
  };
  storage = ( 
    {
      name = "RegisterFile";
      entries = 256;
      instances = 256;
      meshX = 16;
      word-bits = 16;
    }, 
    {
      name = "GlobalBuffer";
      sizeKB = 128;
      instances = 1;
      word-bits = 16;
    }, 
    {
      name = "DRAM";
      technology = "DRAM";
      instances = 1;
      word-bits = 16;
    } );
};
problem : 
{
  R = 1;
  S = 1;
  P = 56;
  Q = 56;
  C = 2;
  K = 256;
  N = 1;
  Wstride = 1;
  Hstride = 1;
  Wdilation = 1;
  Hdilation = 1;
};
mapping = (
    {
      target = 0;
      type = "datatype";
      keep = [ "Weights", "Outputs" ];
      bypass = [ "Inputs" ];
    }, 
    {
      target = 1;
      type = "datatype";
      keep = [ "Weights", "Inputs" ];
      bypass = [ "Outputs" ];
    }, 
    {
      target = 2;
      type = "datatype";
      keep = [ "Weights", "Inputs", "Outputs" ];
      bypass = [ ];
    }, 
    {
      target = 0;
      type = "temporal";
      factors = "R1 S1 P8 Q1 C2 K16 N1";
      permutation = "PCKRSQN";
    }, 
    {
      target = 1;
      type = "spatial";
      factors = "R1 S1 P1 Q2 C1 K8 N1";
      permutation = "QKRSPCN";
      split = 0;
    }, 
    {
      target = 1;
      type = "temporal";
      factors = "R1 S1 P1 Q7 C1 K2 N1";
      permutation = "KQRSPCN";
    }, 
    {
      target = 2;
      type = "temporal";
      factors = "R1 S1 P7 Q4 C1 K1 N1";
      permutation = "PQRSCKN";
    }
);
