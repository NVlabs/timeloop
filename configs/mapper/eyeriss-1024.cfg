# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

arch =
{
    arithmetic =
    {
        name                    =   "MACs";
        instances               =   1024;
        word_bits               =   16;
    };
    storage =
    (
        {
            name                =   "PsumRegFile";
            entries             =   16;
            instances           =   1024;
            meshX               =   32;
            word_bits           =   16;
            read_bandwidth      =   2; # bytes/cycle
            write_bandwidth     =   2; # bytes/cycle
        },
        {
            name                =   "WeightRegFile";
            entries             =   192;
            instances           =   1024;
            meshX               =   32;
            word_bits           =   16;
            read_bandwidth      =   2; # bytes/cycle
            write_bandwidth     =   2; # bytes/cycle
        },
        {
            name                =   "InputRegFile";
            entries             =   12;
            instances           =   1024;
            meshX               =   32;
            word_bits           =   16;
            read_bandwidth      =   2; # bytes/cycle
            write_bandwidth     =   2; # bytes/cycle
        },
        {
            name                =   "DummyBuffer";
            entries             =   0;
            instances           =   32;
            meshX               =   32;
            word_bits           =   16;
        },
        {
            name                =   "GlobalBuffer";
            sizeKB              =   2976;
            instances           =   1;
            meshX               =   1;
            word_bits           =   16;
            block_size          =   16;
            read_bandwidth      =   64; # bytes/cycle (32 for inputs and 32 for psums)
            write_bandwidth     =   64; # bytes/cycle (32 for inputs and 32 for psums)
        },
        {
            name                =   "DRAM";
            technology          =   "DRAM";
            instances           =   1;
            word_bits           =   16;
        }
    );
};

mapspace =
{
    constraints                 =   "rowstationary";
    constraints_rowstationary =
    (
        # Datatype
        {
            target              =   "PsumRegFile";
            type                =   "datatype";
            keep                =   [ "Outputs" ];
            bypass              =   [ "Inputs", "Weights" ];
        },
        {
            target              =   "WeightRegFile";
            type                =   "datatype";
            keep                =   [ "Weights" ];
            bypass              =   [ "Inputs", "Outputs" ];
        },
        {
            target              =   "InputRegFile";
            type                =   "datatype";
            keep                =   [ "Inputs" ];
            bypass              =   [ "Weights", "Outputs" ];
        },
        {
            target              =   "DummyBuffer";
            type                =   "datatype";
            keep                =   [ ];
            bypass              =   [ "Inputs", "Outputs", "Weights" ];
        },
        {
            target              =   "GlobalBuffer";
            type                =   "datatype";
            keep                =   [ "Inputs", "Outputs" ];
            bypass              =   [ "Weights" ];
        },
        # Spatial
        {
            target              =   "DummyBuffer";
            type                =   "spatial";
            factors             =   "N1 P1 Q1 R1 S0";
            permutation         =   "NPQR SCK";
            split               =   4;
        },
        {
            target              =   "GlobalBuffer";
            type                =   "spatial";
            factors             =   "N1 C1 P1 R1 S1";
            permutation         =   "NCPRS QK";
            split               =   7;
        },
        # Temporal
        {
          target                =   "PsumRegFile";
          type                  =   "temporal";
          factors               =   "N1 C1 P1 Q1 R1 S1";
          permutation           =   "NCPQRS K";
        },
        {
          target                =   "WeightRegFile";
          type                  =   "temporal";
          factors               =   "N1 K1 P1 Q1 S1 R0";
          permutation           =   "NKPQS CR";
        },
        {
          target                =   "InputRegFile";
          type                  =   "temporal";
          factors               =   "N1 K1 C1 P1 Q1 R1 S1";
          permutation           =   "NKCPQRS";
        },
        {
          target                =   "DummyBuffer";
          type                  =   "temporal";
          factors               =   "N1 K1 C1 P1 Q1 R1 S1";
          permutation           =   "NKCPQRS";
        },
        {
          target                =   "GlobalBuffer";
          type                  =   "temporal";
          factors               =   "Q1 R1 S1 C1 P0";
          permutation           =   "QRSC PNK";
        },
        {
          target                =   "DRAM";
          type                  =   "temporal";
          factors               =   "R1 S1 P1";
          permutation           =   "RSP CKNQ";
        }
    );
};

mapper =
{
    algorithm                   =   "linear_pruned";
};

problem =
{
    R                           =   3;
    S                           =   3;
    P                           =   56;
    Q                           =   56;
    C                           =   256;
    K                           =   256;
    N                           =   1;
    Wstride                     =   1;
    Hstride                     =   1;
};

